# Forearm camera configuration

PACKAGE='depthai_ros_driver'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
camera = gen.add_group("camera")
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max
camera.add("camera_i_enable_imu", bool_t, 0,"Enabling imu", True)
camera.add("camera_i_enable_ir",  bool_t, 0, "Enabling IR", True)
camera.add("camera_i_floodlight_brightness", double_t, 0, "Floodlight brightness", 0, 0, 1500)
camera.add("camera_i_ip",  str_t, 0, "IP", "")
camera.add("camera_i_laser_dot_brightness", double_t, 0,"Laser dot brightness", 800, 0, 1200)
camera.add("camera_i_mx_id", str_t, 0,"MXID", "")
camera.add("camera_i_usb_port_id", str_t, 0,"USB port ID", "")
camera.add("camera_i_nn_type", str_t, 0, "NN Type", "spatial")
camera.add("camera_i_pipeline_type", str_t, 0, "Pipeline type", "RGBD")
camera.add("camera_i_usb_speed", str_t, 0, "USB Speed", "SUPER_PLUS")
camera.add("camera_i_pipeline_dump", bool_t, 0, "Dump pipeline info at the beginning", False)
camera.add("camera_i_calibration_dump", bool_t, 0, "Dump calibration info at the beginning", False)
camera.add("camera_i_external_calibration_path", str_t, 0, "External calibration path", "")

camera.add("left_i_board_socket_id", int_t, 0, "Sensor board socket id", 1)
camera.add("left_i_calibration_file", str_t, 0, "Path to calibration file", "")
camera.add("left_i_fps", double_t, 0, "FPS", 30.0)
camera.add("left_i_height", int_t, 0, "Image height", 720)
camera.add("left_r_keep_preview_aspect_ratio", bool_t, 0, "Keep preview aspect ratio", True)
camera.add("left_i_low_bandwidth", bool_t, 0, "Use encoding for data", False)
camera.add("left_i_low_bandwidth_quality", int_t, 0, "Quality when using low-bandwidth mode", 50, 1, 100)
camera.add("left_i_max_q_size", int_t, 0, "Internal queue size", 30)
camera.add("left_i_preview_size", int_t, 0, "Preview size", 416)
camera.add("left_i_publish_topic", bool_t, 0, "Enable ROS topic", False)
camera.add("left_i_resolution", str_t, 0, "Sensor resolution", "720")
camera.add("left_i_set_isp_scale", bool_t, 0, "Set ISP scale", True)
camera.add("left_i_width", int_t, 0, "Image height", 1280)
camera.add("left_r_exposure", int_t, 0, "Sensor exposure", 1000, 1, 33000)
camera.add("left_r_focus", int_t, 0, "Focus", 1, 0, 255)
camera.add("left_r_iso", int_t, 0, "Sensor iso", 800, 100, 1600)
camera.add("left_r_set_man_exposure", bool_t, 0, "Enable manual exposure", False)
camera.add("left_r_set_man_focus", bool_t, 0, "Enable manual focus", False)
camera.add("left_r_set_man_whitebalance", bool_t, 0, "Enable manual whitebalance", False)
camera.add("left_r_whitebalance", int_t, 0, "Whitebalance", 3300, 1000, 12000)
camera.add("left_i_simulate_from_topic", bool_t, 0, "Use external topic instead of this node in the pipeline", False)
camera.add("left_i_disable_node", bool_t, 0, "Disable device node when using external input", False)
camera.add("left_i_get_base_device_timestamp", bool_t, 0, "Use base device timestamp", False)
camera.add("left_i_isp_num", int_t, 0, "ISP scale numerator", 2)
camera.add("left_i_isp_den", int_t, 0, "ISP scale denominator", 3)
camera.add("left_i_output_isp", bool_t, 0, "Output ISP instead of video", True)

camera.add("right_i_board_socket_id", int_t, 0, "Sensor board socket id", 2)
camera.add("right_i_calibration_file", str_t, 0, "Path to calibration file", "")
camera.add("right_i_fps", double_t, 0, "FPS", 30.0)
camera.add("right_i_height", int_t, 0, "Image height", 720)
camera.add("right_r_keep_preview_aspect_ratio", bool_t, 0, "Keep preview aspect ratio", True)
camera.add("right_i_low_bandwidth", bool_t, 0, "Use encoding for data", False)
camera.add("right_i_low_bandwidth_quality", int_t, 0, "Quality when using low-bandwidth mode", 50, 1, 100)
camera.add("right_i_max_q_size", int_t, 0, "Internal queue size", 30)
camera.add("right_i_preview_size", int_t, 0, "Preview size", 416)
camera.add("right_i_publish_topic", bool_t, 0, "Enable ROS topic", False)
camera.add("right_i_resolution", str_t, 0, "Sensor resolution", "720")
camera.add("right_i_set_isp_scale", bool_t, 0, "Set ISP scale", True)
camera.add("right_i_width", int_t, 0, "Image height", 1280)
camera.add("right_r_exposure", int_t, 0, "Sensor exposure", 1000, 1, 33000)
camera.add("right_r_focus", int_t, 0, "Focus", 1, 0, 255)
camera.add("right_r_iso", int_t, 0, "Sensor iso", 800, 100, 1600)
camera.add("right_r_set_man_exposure", bool_t, 0, "Enable manual exposure", False)
camera.add("right_r_set_man_focus", bool_t, 0, "Enable manual focus", False)
camera.add("right_r_set_man_whitebalance", bool_t, 0, "Enable manual whitebalance", False)
camera.add("right_r_whitebalance", int_t, 0, "Whitebalance", 3300, 1000, 12000)
camera.add("right_i_simulate_from_topic", bool_t, 0, "Use external topic instead of this node in the pipeline", False)
camera.add("right_i_disable_node", bool_t, 0, "Disable device node when using external input", False)
camera.add("right_i_get_base_device_timestamp", bool_t, 0, "Use base device timestamp", False)
camera.add("right_i_isp_num", int_t, 0, "ISP scale numerator", 2)
camera.add("right_i_isp_den", int_t, 0, "ISP scale denominator", 3)
camera.add("right_i_output_isp", bool_t, 0, "Output ISP instead of video", False)


camera.add("rgb_i_board_socket_id", int_t, 0, "Sensor board socket id", 0)
camera.add("rgb_i_calibration_file", str_t, 0, "Path to calibration file", "")
camera.add("rgb_i_fps", double_t, 0, "FPS", 60.0)
camera.add("rgb_i_height", int_t, 0, "Image height", 720)
camera.add("rgb_i_interleaved", bool_t, 0, "Is frame interleaved or planar", True)
camera.add("rgb_r_keep_preview_aspect_ratio", bool_t, 0, "Keep preview aspect ratio", True)
camera.add("rgb_i_low_bandwidth", bool_t, 0, "Use encoding for data", False)
camera.add("rgb_i_low_bandwidth_quality", int_t, 0, "Quality when using low-bandwidth mode", 50, 1, 100)
camera.add("rgb_i_max_q_size", int_t, 0, "Internal queue size", 30)
camera.add("rgb_i_preview_size", int_t, 0, "Preview size", 416)
camera.add("rgb_i_publish_topic", bool_t, 0, "Enable ROS topic", True)
camera.add("rgb_i_enable_preview", bool_t, 0, "Enable ROS topic", False)
camera.add("rgb_i_resolution", str_t, 0, "Sensor resolution", "1080")
camera.add("rgb_i_set_isp_scale", bool_t, 0, "Set ISP scale", True)
camera.add("rgb_i_width", int_t, 0, "Image height", 1280)
camera.add("rgb_r_exposure", int_t, 0, "Sensor exposure", 1000, 1, 33000)
camera.add("rgb_r_focus", int_t, 0, "Focus", 1, 0, 255)
camera.add("rgb_r_iso", int_t, 0, "Sensor iso", 800, 100, 1600)
camera.add("rgb_r_set_man_exposure", bool_t, 0, "Enable manual exposure", False)
camera.add("rgb_r_set_man_focus", bool_t, 0, "Enable manual focus", False)
camera.add("rgb_r_set_man_whitebalance", bool_t, 0, "Enable manual whitebalance", False)
camera.add("rgb_r_whitebalance", int_t, 0, "Whitebalance", 3300, 1000, 12000)
camera.add("rgb_i_simulate_from_topic", bool_t, 0, "Use external topic instead of this node in the pipeline", False)
camera.add("rgb_i_disable_node", bool_t, 0, "Disable device node when using external input", False)
camera.add("rgb_i_get_base_device_timestamp", bool_t, 0, "Use base device timestamp", False)
camera.add("rgb_i_isp_num", int_t, 0, "ISP scale numerator", 2)
camera.add("rgb_i_isp_den", int_t, 0, "ISP scale denominator", 3)
camera.add("rgb_i_output_isp", bool_t, 0, "Output ISP instead of video", False)


camera.add("stereo_i_align_depth", bool_t, 0, "Whether to align depth to RGB", True)
camera.add("stereo_i_calibration_file", str_t, 0, "Path to calibration file", "")
camera.add("stereo_i_bilateral_sigma", int_t, 0, "Bilateral sigma", 0)
camera.add("stereo_i_board_socket_id", int_t, 0, "Board socket id, depends on alignment", 0)
camera.add("stereo_i_decimation_filter_decimation_factor", int_t, 0, "Decimation factor", 1)
camera.add("stereo_i_decimation_filter_decimation_mode", str_t, 0, "Decimation mode", "PIXEL_SKIPPING")
camera.add("stereo_i_depth_filter_size", int_t, 0, "Depth filter size", 5)
camera.add("stereo_i_depth_preset", str_t, 0, "Depth preset", "HIGH_ACCURACY")
camera.add("stereo_i_enable_companding", bool_t, 0, "Enable companding", False)
camera.add("stereo_i_enable_decimation_filter", bool_t, 0, "Enable decimation filter", False)
camera.add("stereo_i_enable_distortion_correction", bool_t, 0, "Enable distortion correction", True)
camera.add("stereo_i_enable_spatial_filter", bool_t, 0, "Enable spatial filter", False)
camera.add("stereo_i_enable_temporal_filter", bool_t, 0, "Enable temporal filter", False)
camera.add("stereo_i_enable_threshold_filter", bool_t, 0, "Enable threshold filter", False)
camera.add("stereo_i_extended_disp", bool_t, 0, "Enable extended disparity", False)
camera.add("stereo_i_height", int_t, 0, "Output image height", 720)
camera.add("stereo_i_low_bandwidth", bool_t, 0, "Use encoding for data", False)
camera.add("stereo_i_low_bandwidth_quality", int_t, 0, "Quality when using low-bandwidth mode", 50, 1, 100)
camera.add("stereo_i_lr_check", bool_t, 0, "Enable left-right check", True)
camera.add("stereo_i_lrc_threshold", int_t, 0, "Left-right check threshold", 10)
camera.add("stereo_i_max_q_size", int_t, 0, "Internal queue size", 30)
camera.add("stereo_i_rectify_edge_fill_color", int_t, 0, "Rectify edge fill color", 0)
camera.add("stereo_i_spatial_filter_alpha", double_t, 0, "Spatial filter alpha", 0.5)
camera.add("stereo_i_spatial_filter_delta", int_t, 0, "Spatial filter delta", 20)
camera.add("stereo_i_spatial_filter_hole_filling_radius", int_t, 0, "Spatial filter hole filling radius", 2)
camera.add("stereo_i_spatial_filter_iterations", int_t, 0, "Spatial filter iterations", 1)
camera.add("stereo_i_stereo_conf_threshold", int_t, 0, "Stereo confidence threshold", 255, 0, 255)
camera.add("stereo_i_subpixel", bool_t, 0, "Subpixel mode", False)
camera.add("stereo_i_temporal_filter_alpha", double_t, 0, "Temporal filter alpha", 0.4)
camera.add("stereo_i_temporal_filter_delta", int_t, 0, "Temporal filter delta", 20)
camera.add("stereo_i_temporal_filter_persistency", str_t, 0, "Temporal filter persistency", "VALID_2_IN_LAST_4")
camera.add("stereo_i_threshold_filter_max_range", int_t, 0, "Threshold filter max range", 15000)
camera.add("stereo_i_threshold_filter_min_range", int_t, 0, "Threshold filter min range", 400)
camera.add("stereo_i_width", int_t, 0, "Output image width", 1280)
camera.add("stereo_i_disparity_width", str_t, 0, "Disparity width", "DISPARITY_96")
camera.add("stereo_i_get_base_device_timestamp", bool_t, 0, "Use base device timestamp", False)
camera.add("stereo_i_subpixel_fractional_bits", int_t, 0, "Subpixel fractional bits", 3)
camera.add("stereo_i_set_input_size", bool_t, 0, "Set stereo input size", False)
camera.add("stereo_i_input_width", int_t, 0, "Input image width", 1280)
camera.add("stereo_i_input_height", int_t, 0, "Input image height", 720)

camera.add("nn_i_nn_config_path", str_t, 0, "NN JSON Config path", "depthai_ros_driver/mobilenet")
camera.add("nn_i_disable_resize", bool_t, 0, "Disable ImageManip input", False)
camera.add("nn_i_enable_passthrough", bool_t, 0, "Publish passthrough", False)
camera.add("nn_i_enable_passthrough_depth", bool_t, 0, "Publish passthrough depth", False)

camera.add("imu_i_max_q_size", int_t, 0, "Internal queue size", 30)


exit(gen.generate(PACKAGE, "depthai_ros_driver", "parameters"))